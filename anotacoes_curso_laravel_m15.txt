Oque é uma API?

- Intreface de programação de aplicações;
- Conjunto de rotinas e padrões estabelcido por um sottware para
a untilização das suas funcionalidades por aplicativos que não 
pretendem envolver-se em detalhes da implementação do software,
mas apenas usar seus serviços.
- Web service é tipo de API;
- web service são serviços da internet por meio do protocolo 
http;
- Basicamente temos uma aplicação(cliente) request -> web 
Aplicação(webService) response-> web-> aplicação(cliente);
- API representa uma interface entre dois sistemas quando estamos
no contexto web as api são desenvolvidas por meio dos webservices
que normalmente trabalhando sobre o protocolo HTTP e sua 
comunicação é feita atraves de uma liguagem universal geralmente
XML ou JSON;
_________________________________________________________________
Entendendo os princípios do REST

- Tranferencia representacional de estado;
- A principio surgiu apenas para melhorar as falhas que o HTTP
tinha;
- O REST não foi pensado para web services ele foi pensando para
melhorar a semântica do protocolo HTTP;
_________________________________________________________________
Iniciando o projeto Locadora de Carros

php artisan make:model --migration --controller --resource Marca

- Utilizamos esse comando para criar as migrations os controllers;

php artisan make:model -mcr  Modelo

- Com esse comando criamos tudo denovo porem com abreviação das
palavras;

php artisan make:model --all Carro 

- Já com esse comnado criamos tudo que os outros dois comando 
criou acrescido do seeder e do factory;

- Criamos tudo para Cliente e Locacao;
_________________________________________________________________
Configurando a conexão com o banco de dados e implementando as 
migrations

- Baixe o arquivo zip das migrations na pasta banco de dados;
- Não se esqueça de alterar o Locacaos para Locacoes e trocar 
tudo que possa estar errado nesse sentindo;
- Em locacao.php foi adicionado 

protected  $table ='locacoes';

- Além de ter realizado as outras alterações necessárias;
- Após realizar alterações envie para o banco de dados com o 
comando;

php artisan migrate;
_________________________________________________________________
Entendendo o grupo de rotas Web e API e a importância do 
Content-Type

- O content-type é responsavel por entregar ao cliente a resposta
em text/html que é o mais comum geralmente ou em application/json;
- Dicionando isso;

Route::get('/', function () {
    return ['chegamos até aqui'=>'sim'];
});

- E colocando em inspecionar na tela em http://127.0.0.1:8000/api
em network > api > response > content-type > Você consegue 
visualizar qual a extensão do arquivo sé json ou html;
_________________________________________________________________
Rotas e a diferença entre Route::resource e Route::apiResource

- A difrença entre eles é o mapeamento das rotas de modo 
automatico do metodo create e edit;
- Portanto quando trabalharmos com api utilizaremos o apiResource

Route::apiResource('cliente', 'App\Http\Controllers\ClienteController');

- Com isso podemos remover da nosaa class o metodo edit e metodo 
create;
- Crie uma rota api resource para cada controlador criado;
_________________________________________________________________
Extra (fix da aula anterior) - Atributo $namespace de 
RouteServiceProvide

- Ensinando como ajustar o comportamento de não precisar passar a
rota inteira do Controller;
- No laravel 8 vc tem que ir no diretorio Providers > 
RouteServiceProvider.php e descomantar a linha que fala sobre o
controller;
- Mas é indicado para vc que esta iniciando coloque o namespace
completo como haviamos feito;
_________________________________________________________________
Criando registros via POST

- php artisan route:list

- Com esse comando consigo tem acesso a todas routas que foram 
criadas e atraves disso vamos trabalhar com a rota api/marca cujo
o metodo seja posto que chama marca.store;
- Em marcaController adicione uma linha de comanda de return para
ser visual apenas como um teste;
- Em seguida abra o software POSTMAN que te auxiliará na 
manipulação da api;
- Crie um novo buscador de api - adicione o metodo post - em 
seguida direcione qual é a rota que ela deve pesquisar;

localhost:8000/api/marca;

- E clique em Send para verificar se ela esta tendo retorno;
- No POSTMAN vai até body e nele por enquando deixe o 
form-urlencoded;
- Acresente nome e imagem e qualquer valor voltado para teste 
apricncipio adicionei nome-> toyota e imagem -> imagem_toyota.png;
- Em seguida no Controller foi adicionado um dd($request); e no
POSTMAN clicamos em send e em seguida em preview para visualizar
se realmente estavamos tendo uma comunicação e resposta;
- No controller coloque;

Marca::create($request->all());

- Para ser possivel a inserção no banco de dados, porém temos que
na Model Marca e colocar o $fillable passando os paramentros que
vão ser aceitos;

protected $fillable = ['nome','imagem'];

- Em seguida clique em send e veja seu banco de dados;
_________________________________________________________________
Selecionando registros via GET

- Vamos manipular agora dois novos end.points para consulta dos 
registros do tipo marca sendo um geral e um especifico;
- A rota marca.index é resposavel por todos os registros já a 
marca.show é responsavel por um registro especifico;
- No MarcaController;

$marcas = Marca::all();
return $marcas;

- No POSTMAN adicione a rota da api com o metodo GET;

localhost:8000/api/marca;

- Em seguida teste e veja todos os arquivos que foram solicitados;
- Para marca.show;

return $marca;
echo'Chegamos até aqui (show)';

- No POSTMAN adicione a rota com o parametro necessario exemplo
do id escolhi o id de numero 1

localhost:8000/api/marca/1; 

- Teste e veja, em seguida troque o id;
_________________________________________________________________
Atualizando registros via PUT e PATCH

- Vamos implementra um novo end.point na nossa api webservice 
que sera possivel atualizar um registro do tipo marca;
- Para ser possivel esse update é necessario no postman passar o
identificador unico, também passar o verbo http no caso PUT por
enquanto;

print_r($request->all());//os dados atualizados
echo '<hr>';
print_r($marca->getAttributes());//os dados antigos
$marca->update($request->all());
return $marca;

- Agora o PATCH em relação ao PUT não tem nenhuma diferença pois
os dois são utilizados para a mesma finalizada porém 
semanticamente é esperado que patch faz parte de pequenas 
atualizações não atualizações completas;
- Pegamos nosso exemplo seria ideal que utiliza-se apenas para 
alterar o nome, não todos os dados;
_________________________________________________________________
Removendo registros via DELETE

- Também é necessario que você passe o parametro na url;
 
$marca->delete($marca);
return ['msg'=>'A marca foi deletado'];

